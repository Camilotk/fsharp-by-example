<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapters on F# by example</title><link>https://camilotk.github.io/fsharp-by-example/chapters/</link><description>Recent content in Chapters on F# by example</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 22 Jan 2023 22:06:09 -0300</lastBuildDate><atom:link href="https://camilotk.github.io/fsharp-by-example/chapters/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello World in F#</title><link>https://camilotk.github.io/fsharp-by-example/chapters/hello-world/</link><pubDate>Thu, 10 Nov 2022 10:31:11 +0300</pubDate><guid>https://camilotk.github.io/fsharp-by-example/chapters/hello-world/</guid><description>The first program that anyone will always do first when starting to learn a new programming language is a program that prints &amp;ldquo;hello world&amp;rdquo; in a terminal. We&amp;rsquo;ll do that for practice, to get used to the language and environment.
What you will need for this? F# installed on your machine, if you don&amp;rsquo;t have it yet, this link will help you. A UTF-8 compatible text editor for you to edit the code, if you don&amp;rsquo;t have any preference we recommend Visual Studio Code.</description></item><item><title>Using REPL</title><link>https://camilotk.github.io/fsharp-by-example/chapters/using-repl/</link><pubDate>Sun, 22 Jan 2023 22:01:29 -0300</pubDate><guid>https://camilotk.github.io/fsharp-by-example/chapters/using-repl/</guid><description>We&amp;rsquo;ll have a lot of code examples along this tutorial, for better understanding we recommend you to use the REPL.
What is REPL? The REPL (Read-Eval-Print Loop) tool in F# allows users to quickly and easily test code snippets and evaluate expressions. This can be especially useful for new users, as it allows them to quickly experiment and learn the language without the need to write and run full-fledged programs. Additionally, the REPL provides immediate feedback, making it easier to identify and correct errors in code.</description></item><item><title>Variables</title><link>https://camilotk.github.io/fsharp-by-example/chapters/variables/</link><pubDate>Sun, 22 Jan 2023 12:22:06 -0300</pubDate><guid>https://camilotk.github.io/fsharp-by-example/chapters/variables/</guid><description>In this first part we will be discussing how to create, set, and use variables in F#. Variables are a fundamental concept in programming and are used to store and manipulate data. In F#, variables are immutable by default, which means that their value cannot be modified once they are set. This makes F# a functional programming language and it helps to improve the program&amp;rsquo;s performance and predictability.
Creating variables In F#, variables are created using the let keyword.</description></item><item><title>Functions</title><link>https://camilotk.github.io/fsharp-by-example/chapters/functions/</link><pubDate>Sat, 21 Jan 2023 22:22:09 -0300</pubDate><guid>https://camilotk.github.io/fsharp-by-example/chapters/functions/</guid><description>F# is a functional programming language that allows developers to create powerful and expressive code. One of the key features of F# is its support for functions, which are used to perform specific tasks and return a value. In this chapter, we will explore the basics of functions in F# and how they can be used to create reusable and composable code.
Defining functions in F# In F#, a function is defined using the keyword let followed by the name of the function, a list of parameters, and the value or expression that the function will return.</description></item><item><title>Lambda Functions</title><link>https://camilotk.github.io/fsharp-by-example/chapters/lambda-functions/</link><pubDate>Sun, 22 Jan 2023 22:05:50 -0300</pubDate><guid>https://camilotk.github.io/fsharp-by-example/chapters/lambda-functions/</guid><description>In F#, lambda functions - or if you prefer, anonymous functions - are defined using the fun keyword. These functions are useful for creating small, one-time-use functions that don&amp;rsquo;t need to be named. They can be passed as arguments to other functions, and can be used to create higher-order functions.
How to create lambda functions A lambda function is a special type of anonymous function that can be used to create higher-order functions.</description></item><item><title>Composition</title><link>https://camilotk.github.io/fsharp-by-example/chapters/composition/</link><pubDate>Sun, 22 Jan 2023 22:06:09 -0300</pubDate><guid>https://camilotk.github.io/fsharp-by-example/chapters/composition/</guid><description>Function composition is the process of combining two or more functions to create a new function.
Composition operator In F#, we can use the &amp;gt;&amp;gt; operator to compose functions. The &amp;gt;&amp;gt; operator takes the output of the left-hand function and uses it as the input for the right-hand function.
For example, let&amp;rsquo;s say we have two functions, f and g, that take an integer as input and return an integer as output.</description></item></channel></rss>