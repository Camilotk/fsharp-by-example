[{"id":0,"href":"/fsharp-by-example/chapters/hello-world/","title":"Hello World in F#","parent":"Chapters","content":"The first program that anyone will always do first when starting to learn a new programming language is a program that prints \u0026ldquo;hello world\u0026rdquo; in a terminal. We\u0026rsquo;ll do that for practice, to get used to the language and environment.\nWhat you will need for this? F# installed on your machine, if you don\u0026rsquo;t have it yet, this link will help you. A UTF-8 compatible text editor for you to edit the code, if you don\u0026rsquo;t have any preference we recommend Visual Studio Code. Know how to use the terminal in your operating system, and how to navigate around it. Create the project We will create a console project to do this. To do it we will enter to the folder in our terminal where we want to create this project and enter the command.\n\u0026gt; dotnet new console -lang F# -o Hello The \u0026gt; marker is to indicate that this command should be run on terminal. It\u0026rsquo;s the same as $ for Linux and Mac.\nThis will create a folder \u0026ldquo;Hello\u0026rdquo; with our main project. Inside this folder we will have two files:\nHello.fsproj: That contains the project configuration. Program.fs: That contains our F# code. If we open the \u0026ldquo;Program.fs\u0026rdquo; file we will see: // For more information see https://aka.ms/fsharp-console-apps printfn \u0026#34;Hello from F#\u0026#34; And that\u0026rsquo;s the code that prints \u0026ldquo;Hello from F#\u0026rdquo; in console! The \u0026ldquo;Hello World\u0026rdquo; program is also the example of code of every new F# project.\nUnderstanding this code The first line is a comment, which means that the rest of the code in the line will not be executed. Any code in a line starting with // or between (* ... *) is ignored and not executed. We use it to add information about the code for other programmers that will eventually work in this code. In this case, a message from Microsoft about where we can find more information about console apps.\nThe second line starts with a function. For now, you can think of it as \u0026ldquo;commands\u0026rdquo; as we\u0026rsquo;ll see it next. The printfn function receives a message in String (any text between \u0026quot;...\u0026quot;) and prints it in console.\nChanging the program As we don\u0026rsquo;t need the comment since it will not be executed, we can just delete this line. And, as we want to print \u0026ldquo;Hello World\u0026rdquo; and not \u0026ldquo;Hello from F#!\u0026rdquo;, we can change the value to get what we want.\nChange Program.fs to:\nprintfn \u0026#34;Hello World\u0026#34; Compiling the project After changing the message and before we execute our program, we have to compile it. You can think of compilation as the process that translates your code into code that the computer understands. To do this, just run the command in your terminal:\n\u0026gt; dotnet build For linux users:\nAdd to your .bashrc the flag `export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1` in case of some error at build process. Run the project Now we can run the project, for do it just enter in your terminal the command:\n\u0026gt; dotnet run And you should see \u0026ldquo;Hello World\u0026rdquo; printed in your terminal.\nCongratulations! You done your first F# program.\nGoing to the next level We did the \u0026ldquo;Hello World\u0026rdquo; program, but now we can upgrade it to display \u0026ldquo;Hello\u0026rdquo; for any value so it would work with \u0026ldquo;from F#\u0026rdquo; or \u0026ldquo;World\u0026rdquo; as we want. To do this we will change the printfn function to print formatted text passing a specifier that will be replaced for the message we want.\nSo we\u0026rsquo;ll change our Program.fs to: printfn \u0026#34;Hello %s\u0026#34; \u0026#34;World\u0026#34;\nAnd then build and run it again!\nNow if we want \u0026ldquo;from F#\u0026rdquo; instead \u0026ldquo;World\u0026rdquo; we can change to: So we\u0026rsquo;ll change our Program.fs to: printfn \u0026#34;Hello %s\u0026#34; \u0026#34;from F#\u0026#34;\nNow, if we build and run again, we should see the original message.\nA taste of a statically typed language F# is different from how some other languages works with Types. This means that each piece of information has to be from the expected type in order to work. For example, the %s specifier expects a String type (a message between \u0026quot;...\u0026quot;) if we try to pass a number, for example 42, we will get an error.\nTry doing this, passing 42 as the message: printfn \u0026#34;Hello %s\u0026#34; 42\nIf you try to build this program, you\u0026rsquo;ll get the error:\nerror FS0001: This expression was expected to have type \u0026#39;string\u0026#39; but here has type \u0026#39;int\u0026#39; [.../Hello/Hello.fsproj] The error message is telling us that we should pass a \u0026ldquo;String\u0026rdquo; for this function, but we\u0026rsquo;re passing an \u0026ldquo;int\u0026rdquo; (an \u0026ldquo;Integer\u0026rdquo; number). Our program didn\u0026rsquo;t even produce a new build. We will only be able to execute the code when we fix it by passing the correct value.\nThis will help us to avoid mistakes and errors in our programs. By checking all our errors and enforcing each command to receive the correct parameters, F# will help us to write programs that have less bugs and errors.\n"},{"id":1,"href":"/fsharp-by-example/chapters/using-repl/","title":"Using REPL","parent":"Chapters","content":"We\u0026rsquo;ll have a lot of code examples along this tutorial, for better understanding we recommend you to use the REPL.\nWhat is REPL? The REPL (Read-Eval-Print Loop) tool in F# allows users to quickly and easily test code snippets and evaluate expressions. This can be especially useful for new users, as it allows them to quickly experiment and learn the language without the need to write and run full-fledged programs. Additionally, the REPL provides immediate feedback, making it easier to identify and correct errors in code. Overall, the use of the REPL can greatly facilitate the learning process and make it more interactive and efficient.\nHow to use it on terminal You can use it on terminal, even in the integrated terminal of Visual Studio Code following this steps:\nOpen a terminal window and navigate to the directory where you want to run your F# code. Type dotnet fsi to start the F# REPL. You should see the F# prompt, which is \u0026ldquo;\u0026gt;\u0026rdquo;. Type the code you want to execute and press \u0026ldquo;Enter\u0026rdquo;. For example, to print \u0026ldquo;Hello, World!\u0026rdquo; to the console, type: \u0026gt; printfn \u0026#34;Hello, World!\u0026#34;;; Note that you need to use \u0026ldquo;;;\u0026rdquo; to indicate the end of the expression, which is different from the F# Interactive window in Visual Studio.\nThe F# REPL will evaluate the expression and return the result, just like in the F# Interactive window. How to use it on Visual Studio You can use it on Visual Studio following this steps:\nOpen the F# Interactive window in Visual Studio by selecting \u0026ldquo;View\u0026rdquo; \u0026gt; \u0026ldquo;Other Windows\u0026rdquo; \u0026gt; \u0026ldquo;F# Interactive\u0026rdquo; or by using the keyboard shortcut \u0026ldquo;Ctrl+Alt+F\u0026rdquo; Type the code you want to execute in the F# Interactive window and press \u0026ldquo;Enter\u0026rdquo;. For example, to print \u0026ldquo;Hello, World!\u0026rdquo; to the console, type: printfn \u0026#34;Hello, World!\u0026#34; The F# Interactive will evaluate the expression and return the result, in this case it will print \u0026ldquo;Hello, World!\u0026rdquo; in the console. Script files .fsx files are F# script files, which allow you to write and execute F# code without the need to create a full-fledged project or solution. These files are typically used for small, self-contained scripts or for prototyping and experimentation.\nWhen you execute an .fsx file, the F# compiler will run through the code in the file and execute any statements or expressions that it contains. This allows you to write and run code snippets quickly, without the need to set up a full project or solution.\nOne of the main advantages of using .fsx files is that they allow for a more interactive and iterative development process. You can quickly test and experiment with different ideas, and make changes to your code without the need to rebuild a full project.\nAdditionally, .fsx files can be useful for automating tasks, such as data processing or code generation. You can write a script that performs a specific task, and then run it as needed to automate the process.\nYou can also use .fsx files in conjunction with the F# REPL, by using the \u0026ldquo;#load\u0026rdquo; command to load the script file and execute it. This allows you to test and run your code snippets interactively and to test your functions, modules and types before you include them in your project.\n\u0026gt; #load \u0026#34;./your_script.fsx\u0026#34;;; Overall, .fsx files are a powerful tool that can greatly facilitate the development process in F# and make it more interactive and efficient.\n"},{"id":2,"href":"/fsharp-by-example/chapters/variables/","title":"Variables","parent":"Chapters","content":"In this first part we will be discussing how to create, set, and use variables in F#. Variables are a fundamental concept in programming and are used to store and manipulate data. In F#, variables are immutable by default, which means that their value cannot be modified once they are set. This makes F# a functional programming language and it helps to improve the program\u0026rsquo;s performance and predictability.\nCreating variables In F#, variables are created using the let keyword. The basic syntax for creating a variable is as follows:\nlet variable_name = value For example, to create a variable called \u0026ldquo;x\u0026rdquo; and set its value to 5, we would use the following code:\nlet x = 5 You can also create a variable and define its type using the \u0026ldquo;:\u0026rdquo; operator, like this:\nlet x : int = 5 Setting Variables In F#, variables are set using the \u0026ldquo;let\u0026rdquo; keyword, followed by the variable name, an equal sign (=), and the value to be assigned to the variable. For example:\nlet x = 5 This creates a new variable named \u0026ldquo;x\u0026rdquo; and assigns the value of 5 to it.\nOnce a variable is set, its value cannot be modified directly. This is because F# variables are immutable by default, which means that their value cannot be changed once they are set.\nImmutability In summary, immutability in F# refers to the fact that the value of a variable cannot be changed once it is set. This can help prevent a number of problems that can occur in other languages when working with mutable variables, such as concurrent access, side effects, and debugging.\nConcurrent access: When multiple threads have access to a mutable variable, it can lead to race conditions where different threads try to access and change the variable at the same time. With immutable variables, this problem is avoided because each thread can only access a specific version of the variable and cannot change it. Side effects: Mutable variables can lead to unintended side effects where a change in one part of the code unexpectedly affects another part of the code. With immutable variables, it is clear that the value of a variable can only be changed in one place, making it easier to reason about the code and prevent unintended side effects. Debugging: When working with mutable variables, it can be difficult to track down the cause of a bug when the value of a variable has changed unexpectedly. With immutable variables, the value of a variable can only be changed in one place, making it easier to trace the flow of data through the code and find the source of a bug. Shadowing Once a variable is created, its value cannot be modified. However, you can create a new variable with the same name and a new value.\nFor example, the following code creates a new variable called \u0026ldquo;x\u0026rdquo; with a value of 10:\nlet x = 10 The first let x = 5 creates the variable and assigns the value of 5 to it. The second let x = 10 creates a new variable also called x and assigns the new value of 10.\nCreating new variables with the same name and new values is referred to as \u0026ldquo;shadowing\u0026rdquo; in F#.\nWhen you create a new variable with the same name as an existing variable, the new variable \u0026ldquo;shadows\u0026rdquo; the existing variable, meaning that it takes precedence and can be used instead of the existing variable. However, the existing variable is still accessible and can be used if needed.\nIt\u0026rsquo;s important to note that shadowing can make the code more difficult to understand and maintain, as it can be unclear which variable is being referred to at a given point in the code. Therefore, it\u0026rsquo;s generally recommended to use meaningful variable names and to avoid shadowing whenever possible.\nDeclaring mutable values However, there may be situations where you need to work with mutable variables, for example when you need to change the value of a field in a record or when you need to update the state of an object.\nTo create a mutable variable in F#, you can use the mutable keyword before the variable\u0026rsquo;s name. For example:\nlet mutable x = 5 x \u0026lt;- 10 // x value change to 10 While there may be situations where you need to work with mutable variables in F#, it\u0026rsquo;s important to be aware of the risks and potential problems that can arise from doing so. In general, it\u0026rsquo;s a good idea to use immutable variables as much as possible and to use mutable variables only when necessary.\n"},{"id":3,"href":"/fsharp-by-example/chapters/functions/","title":"Functions","parent":"Chapters","content":"F# is a functional programming language that allows developers to create powerful and expressive code. One of the key features of F# is its support for functions, which are used to perform specific tasks and return a value. In this chapter, we will explore the basics of functions in F# and how they can be used to create reusable and composable code.\nDefining functions in F# In F#, a function is defined using the keyword let followed by the name of the function, a list of parameters, and the value or expression that the function will return. For example, the following code defines a simple function called \u0026ldquo;add\u0026rdquo; that takes two parameters, x and y, and returns their sum:\nlet add x y = x + y In addition to defining functions in this way, F# also supports curried functions, which are functions that take multiple arguments, but can be called with fewer arguments and return a new function that takes the remaining arguments. For example, the following code defines a curried version of the add function:\nlet add x = fun y -\u0026gt; x + y Using functions in F# Once a function has been defined, it can be called by providing it with the necessary arguments. For example, the following code calls the add function with the arguments 2 and 3 and assigns the result to the variable result:\nlet result = add 2 3 In addition to calling functions directly, F# also supports higher-order functions, which are functions that take other functions as arguments or return them as results. For example, the following code defines a function called \u0026ldquo;map\u0026rdquo; that takes a list and a function and applies the function to each element of the list:\nlet map list f = List.map f list Multiple argument functions In F#, functions can take multiple inputs. These inputs are separated by a space and are passed in as a tuple. For example, the following function takes in two inputs, an int and a string, and returns a concatenation of the two:\nlet concatFunction (x:int) (y:string) = x.ToString() + y We can call this function by passing in two arguments, like so:\nlet result = concatFunction 5 \u0026#34;hello\u0026#34; // result is \u0026#34;5hello\u0026#34; "},{"id":4,"href":"/fsharp-by-example/chapters/lambda-functions/","title":"Lambda Functions","parent":"Chapters","content":"In F#, lambda functions - or if you prefer, anonymous functions - are defined using the fun keyword. These functions are useful for creating small, one-time-use functions that don\u0026rsquo;t need to be named. They can be passed as arguments to other functions, and can be used to create higher-order functions.\nHow to create lambda functions A lambda function is a special type of anonymous function that can be used to create higher-order functions. Lambda functions are defined using the \u0026ldquo;fun\u0026rdquo; keyword, followed by input parameters and the \u0026ldquo;-\u0026gt;\u0026rdquo; operator, which separates the inputs from the function body.\nHere\u0026rsquo;s an example of a lambda function that takes two integers as input and returns their product:\nlet multiplyTwoNumbers = (fun x y -\u0026gt; x * y) This function can be used like any other function, for example:\nlet result = multiplyTwoNumbers 2 3 Currying Currying is a technique in functional programming where a function is transformed into a sequence of functions, each taking a single argument. In F#, currying is done automatically when a function takes multiple arguments.\nHere\u0026rsquo;s an example of currying in F#:\nlet addTwoNumbers x y = x + y let addTwoNumbersCurried = addTwoNumbers let result = addTwoNumbersCurried 2 3 In this example, the addTwoNumbers function is transformed into a curried function addTwoNumbersCurried.\nPartial functions Partial functions are functions that are applied to only a subset of their input arguments. In F#, partial functions are created using the \u0026ldquo;partial\u0026rdquo; keyword.\nHere\u0026rsquo;s an example of a partial function that takes two integers as input and returns their sum:\nlet addTwoNumbers x y = x + y let addTwoNumbersCurried = addTwoNumbers let result = addTwoNumbersCurried 2 3 In this example, the addTwoNumbersPartial function is a partial function that is applied to only one of its input arguments, in this case the argument 2, this function can be used like any other function, for example:\nlet result = addTwoNumbersPartial 3 "},{"id":5,"href":"/fsharp-by-example/chapters/composition/","title":"Composition","parent":"Chapters","content":"Function composition is the process of combining two or more functions to create a new function.\nComposition operator In F#, we can use the \u0026gt;\u0026gt; operator to compose functions. The \u0026gt;\u0026gt; operator takes the output of the left-hand function and uses it as the input for the right-hand function.\nFor example, let\u0026rsquo;s say we have two functions, f and g, that take an integer as input and return an integer as output. We can create a new function, h, that is the composition of f and g by using the \u0026gt;\u0026gt; operator:\nlet h = f \u0026gt;\u0026gt; g h will take an integer as input and return the output of f when given the output of g as input. This can be written as:\nlet h x = g(f x) A simple example of function composition in F# is composing the delta function to a quadratic function:\nlet quadratic a b c x = a * x * x + b * x + c let delta x = x * x let composed = quadratic 2 3 4 \u0026gt;\u0026gt; delta printfn \u0026#34;Result: %i\u0026#34; (composed 4) In this example, the delta function is being composed with the quadratic function using the \u0026gt;\u0026gt; operator, which is the forward function composition operator. The quadratic function is being called with the arguments 2, 3, and 4, and then the result of that function is being passed as the input to the delta function. The final result is being stored in the composed composed function and called with value 4 to be printed to the console.\nBackward composition This operator (\u0026laquo;) is used to compose functions from right to left. It takes the output of the function on the right side and uses it as the input for the function on the left side. For example, the following code composes the same two functions as before, but in reverse order:\nlet evens numbers = numbers |\u0026gt; List.filter (not \u0026lt;\u0026lt; fun n -\u0026gt; n % 2 = 0) evens [2; 3; 5; 6; 9; 12] // Result is [3; 5; 9] Function composition is a fundamental concept in functional programming, and it is a key feature of F#. By using function composition, you can create complex logic using simple, reusable functions. This makes your code more maintainable and easier to understand.\nPipeline operator F# also has pipeline operators, or pipe operators, which allow us to chain function calls together in a readable way. The pipeline operator |\u0026gt; takes the output of the expression on the left-hand side and uses it as the input for the function on the right-hand side.\nFor example, let\u0026rsquo;s say we have a function f that takes an integer as input and returns an integer as output. We can call this function and pass in the result of another expression using the pipeline operator:\n2 |\u0026gt; f This is equivalent to:\nf 2 We can also chain multiple function calls together using the pipeline operator:\n2 |\u0026gt; f |\u0026gt; g |\u0026gt; h This will take the integer 2, pass it through the function f, take the output and pass it through the function g, then take the output of that and pass it through the function h.\nBackward pipeline This operator is used to compose functions from right to left. It takes the output of the function on the right side and uses it as the input for the function on the left side. For example, the following code composes the same two functions as before, but in reverse order:\nsin \u0026lt;| 2. + 1. // result is 0.1411200081 Pipeline with multiple arguments For to be possible pipe the output from a funtion or values to another function is necessary it have only one argument or it will give us an error:\n3 7 |\u0026gt; min // Error For this function we have to use the double pipe operator:\n(3,7) ||\u0026gt; min // result is 3 If the function has three operators you have to use the triple pipe operator:\n(6,5,2) |||\u0026gt; (fun x y z -\u0026gt; x + y * z) // result is 16 If your function needs four or more arguments its a better idea compose it in smaller parts to them work togheter than use piping.\n"},{"id":6,"href":"/fsharp-by-example/chapters/","title":"Chapters","parent":"","content":""},{"id":7,"href":"/fsharp-by-example/","title":"","parent":"","content":" F# by Example This is a hands on F# Guide where each chapter is a follow up code tutorial to learn F#.\n"},{"id":8,"href":"/fsharp-by-example/tags/","title":"Tags","parent":"","content":""}]